/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
                            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
                            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isn't then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

params {
    modules {
        'checksums'{
            publish_dir  = 'checksums'
        }
        'fastqc' {
            args         = '--quiet'
        }
        'multiqc' {
            args         = params.multiqc_config ? "--config $multiqc_custom_config" : ''
        }
        'cutadapt' {
            args         = "-Z -e 0 --no-indels --action none --discard-untrimmed -g ${params.restriction_sites}"
            publish_dir  = 'trimmed_fq'
            publish_files= ''
        }
        //preparegenome.nf
        'digest_genome'{
            publish_dir  = 'genome/digest'
        }
        'genomefilter'{
            publish_dir  = 'genome/filtered'
        }
        'chromsizes'{
            publish_dir  = 'genome'
        }
        'bwa_index' {
            args         = '-a bwtsw'
            publish_dir  = 'genome/bwa_index'
            publish_files= ''
        }
        'gtf2bed' {
            publish_files= ''
        }
        'gffread' {
            publish_files= ''
        }
        'gunzip' {
            publish_files=''
        }
        'bwa_mem' {//not output, need to be merged and sorted
            args         = '-SP' //skip mate rescue and pairing
            publish_files= ''
        }
        'samtools_merge' {//not output, output when bam_stats
            publish_files= ''
        }
        //bam_stats.nf
        'samtools_sort' {//bam_stats, start from sorting
            suffix       = '.srt'
            publish_dir  = 'bwa/mapped/bam'
        }
        'samtools_index' {
            publish_dir  = 'bwa/mapped/bam'
        }
        'samtools_stats' {//bam_stats
            publish_dir  = 'bwa/mapped/QC'
        }
        'samtools_flagstat' {//bam_stats
            publish_dir  = 'bwa/mapped/QC'
        }
        'samtools_idxstats' {//bam_stats
            publish_dir  = 'bwa/mapped/QC'
        }
        //pairtools.nf
        'pairtools_parse' {
            args         = '--min-mapq 10 --max-molecule-size 2000 --max-inter-align-gap 20 --walks-policy mask  --no-flip --drop-seq --drop-sam'
            publish_dir  = 'pairs/raw'
        }
        'pairtools_flip' {
            publish_files= ''
        }
        'pairtools_select'{// select valid pairs
            args         = "(pair_type=='UU') or (pair_type=='UR') or (pair_type=='RU')"
            publish_files= ''
        }
        'pairtools_sort' {// sort the valid pairs
            suffix       = '.sorted'
            publish_files= ''
        }
        'paritools_dedup'{// remove duplicate pairs
            args         = '--max-mismatch 1 --method max'
            suffix       = '.dedup'
            publish_files= ''
        }
        'pairtools_restrict'{//Assign restriction fragments to pairs
            suffix       = '.restrict'
            publish_files= ''
        }
        'pairtools_select_long'{//publish valid.pairs
            args         = '(COLS[-6]==COLS[-3]) and (chrom1==chrom2)'
            publish_dir  = 'pairs/filtered/samefrag'
            //publish_files= ''
        }
        'pairix'{//index for valid.pairs
            publish_dir  = 'pairs/filtered/samefrag'
            publish_files= ''
        }
        'reads_stat' {
            publish_dir  = 'pairs/QC'
        }
        'reads_summary'{
            publish_dir  = 'pairs/QC'
        }
        'pairsqc'{
            publish_dir  = 'pairs/QC'
        }
        'pairsplot'{
            publish_dir  = 'pairs/QC'
        }
        //cooler.nf
        'cooler_cload'{
            args         = '--max-split 2'
            publish_files= ''
        }
        'cooler_merge'{
            publish_dir  = 'cooler/merge'
            publish_files= ''
        }
        'cooler_zoomify'{
            args         = '--balance'
            publish_dir  = 'cooler/mcool'
        }
        'cooler_dump_per_group'{
            args         = '-t pixels -H --join'
            publish_files= ''
        }
        'cooler_dump_per_sample'{
            args         = '-t pixels -H --join'
            publish_files= ''
        }
        'dumpintrareads_per_group'{// dump long intra reads for each group for maps
            publish_dir  = 'pairs/long_reads/byGroup'
            publish_files= ''
        }
        'dumpintrareads_per_sample'{// dump long intra reads for each samples for differential analysis
            publish_dir  = 'pairs/long_reads/bySample'
            publish_files= ''
        }
        'juicer'{//convert to .hic file
            publish_dir  = 'cooler/hic'
        }
        //callatacpeak.nf
        'pairtools_select_short'{// extract ATAC reads, split the pairs into longRange_Trans pairs (unselected) and short pairs (selected)
            args         = '(chrom1==chrom2) and (abs(pos1 - pos2) < 1e4)'
            suffix       = '.short'
            publish_dir  = 'pairs/filtered/short'
            publish_files= ''
        }
        'shift_reads'{// shift Tn5 insertion for longRange_Trans pairs
            publish_dir  = 'ATACpeak/shifted_R2_reads'
            publish_files= ''
        }
        'merge_reads'{// merge the read in same group
            publish_dir  = 'ATACpeak/merged_R2_reads'
            publish_files= ''
        }
        'macs2_atac'{// call ATAC narrow peaks for group
            args         = "--shift ${params.shiftsize} --extsize ${params.smooth_window} --nomodel -B --SPMR --keep-dup all --call-summits --qval ${params.qval_thresh}"
            publish_dir  = 'ATACpeak/peaks_per_Group'
        }
        'merge_peak'{// merge all the called peaks
            publish_dir  = 'ATACpeak/merged_peaks'
        }
        'atacqc'{// ATAC QC
            publish_dir  = 'ATACpeak/QC'
        }
        'dump_reads_per_group'{// dump ATAC reads for each group for maps
            publish_dir  = 'pairs/R2_reads/byGroup'
            publish_files= ''
        }
        'dump_reads_per_sample'{// dump ATAC reads for each samples for differential analysis
            publish_dir  = 'pairs/R2_reads/bySample'
            publish_files= ''
        }
        'bedtools_genomecov_per_group'{// convert bed to bedgraph
            args         = '-bga -split'
            publish_files= ''
        }
        'bedtools_genomecov_per_sample'{// convert bed to bedgraph
            args         = '-bga -split'
            publish_files= ''
        }
        'bedtools_sort_per_group'{// sort the bedgraph
            suffix       = '.srt'
            publish_files= ''
        }
        'bedtools_sort_per_sample'{// sort the bedgraph
            suffix       = '.srt'
            publish_files= ''
        }
        'ucsc_bedclip'{// clip the bed file output from macs2
            suffix       = '.clip'
            publish_files= ''
        }
        'ucsc_bedgraphtobigwig_per_group'{// output bigwig
            publish_dir  = 'ATACpeak/R2_bigwig/byGroup'
        }
        'ucsc_bedgraphtobigwig_per_sample'{// output bigwig
            publish_dir  = 'ATACpeak/R2_bigwig/Tn5InsSitesBySample'
        }
        // prepare background, multienzyme.nf
        'maps_cut' {
            publish_files= ''
        }
        'maps_fend' {//fix end, by bedtools slop, here are fixed -l 0 -r fragment size;
            args         = '-s -l 0' // parameters for bedtools/slop, please do not modify.
            publish_files= ''
        }
        'genmap_index' {//no publish
            publish_files= ''
        }
        'genmap_mappability' {//no publish
            args         = '-K 50 -E 2 -w'
            publish_files=''
        }
        'ucsc_wigtobigwig' {//publish mappability here
            publish_dir  = 'genome/mappability'
        }
        'ensembl_ucsc_convert'{//no publish
            args         = 'toUCSC'
            publish_files= ''
        }
        'maps_mapability' {
            publish_files= ''
        }
        'maps_merge' {
            args         = "$params.restriction_sites_cut_off"
            publish_files= ''
        }
        'maps_feature'{
            publish_dir  = 'genome/digest'
        }
        //maps_peak.nf
        'maps_maps'{
            args         = 'NA --BINNING_RANGE 100000000' //sex_chroms_to_process --BINNING_RANGE
            publish_dir  = 'MAPSpeak/parameters'
            publish_files= ''
        }
        'maps_callpeak'{
            args         = "${params.maps_cutoff_counts} ${params.maps_cutoff_fold_change} ${params.maps_cutoff_fdr} ${params.maps_filter} ${params.maps_model}" // cutoff_counts cutoff_fold_change filter model
            publish_dir  = 'MAPSpeak'
            publish_files= ''
        }
        'maps_stats'{
            publish_dir  = 'MAPSpeak'
        }
        'maps_reformat'{
            publish_dir  = 'MAPSpeak'
        }
        //annotation
        'chippeakanno_maps'{
            suffix       = 'bin'
            publish_dir  = 'MAPSpeak'
        }
        'trackviewer_maps' {
            args         = "--maxevents $params.v4c_max_events"
            suffix       = 'bin'
            publish_dir  = 'MAPSpeak'
        }
        //diffhicar
        'diffhicar'{
            suffix       = 'edgeR_bin'
            publish_dir  = 'DifferentialAnalyis'
        }
        'chippeakanno'{
            suffix       = 'edgeR_bin'
            publish_dir  = 'DifferentialAnalyis'
        }
        'enrichment'{
            suffix       = 'edgeR_bin'
            args         = "-q $params.enrichment_fdr"
            publish_dir  = 'DifferentialAnalyis'
        }
        'trackviewer' {
            args         = "--maxevents $params.v4c_max_events"
            suffix       = 'edgeR_bin'
            publish_dir  = 'DifferentialAnalyis'
        }
        'igv' {
            publish_dir  = 'igv.js'
        }
    }
}

process {
    withName: BEDTOOLS_SORT {
        errorStrategy = 'ignore'
        memory        = { check_max( 128.GB * task.attempt, 'memory'  ) }
    }
    withName: BEDTOOLS_SORT_SAM {
        errorStrategy = 'ignore'
        memory        = { check_max( 128.GB * task.attempt, 'memory'  ) }
    }
}
